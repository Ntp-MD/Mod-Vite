import{r as b,e as H,_ as me,k as be,c as P,b as r,F as O,f as D,u as o,l as ge,t as R,o as T,n as U,m as $e}from"./index-Dgg_ZVg9.js";const N=b([]),L=b(1),G=b([]),j=b({}),x=b([]),p=b(0),v=b(0),y=b("idle"),M=b(0),Y=b(0),J=10,s=b(6),ye=b(500),B=b(0),$=b([]),d=b([]),i=b([]),k=b([]),Z=b([]),ee=b([]),ke=b([]),A=b([]),pe=[10,30,50,100],z=10,Q=H(()=>Math.max(0,M.value-(i.value[0]||0))),_e=H(()=>d.value[0]+(i.value[0]||0)),oe=H(()=>y.value==="idle"?!1:M.value===(i.value[0]||0)),se=H(()=>M.value>(i.value[0]||0)&&d.value[0]>=M.value-(i.value[0]||0)),ie=H(()=>d.value[0]>M.value-(i.value[0]||0));H(()=>y.value!=="idle");const re=H(()=>d.value[0]>0&&y.value!=="idle"&&y.value!=="showdown"),q=b(null);function c(e){N.value[L.value-1]||(N.value[L.value-1]=[]),N.value[L.value-1].push(e)}function ae(e){switch(e){case"♠":return"spades";case"♥":return"hearts";case"♦":return"diamonds";case"♣":return"clubs";default:return""}}function ve(){const e=["♠","♥","♦","♣"],u=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],t=[];for(const l of e)for(const n of u)t.push({rank:n,suit:l});for(let l=t.length-1;l>0;l--){const n=Math.floor(Math.random()*(l+1));[t[l],t[n]]=[t[n],t[l]]}return t}function ce(e,u){const t={};for(let l=0;l<e;l++)t[l]=G.value.splice(0,u);return t}function de(e){const u={2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,J:11,Q:12,K:13,A:14},t={},l={},n=e.map(h=>u[h.rank]).sort((h,F)=>h-F);for(const h of e){const F=u[h.rank];t[F]=(t[F]||0)+1,l[h.suit]=(l[h.suit]||0)+1}const a=Object.values(l).some(h=>h>=5);let f=null;if(a){for(const h in l)if(l[h]>=5){f=h;break}}const _=(a?e.filter(h=>h.suit===f):e).map(h=>u[h.rank]).sort((h,F)=>h-F);let m=[...new Set(_)].sort((h,F)=>h-F),g=!1,w=0;if(m.length>=5){for(let h=m.length-1;h>=4;h--)if(m[h]-m[h-4]===4){g=!0,w=m[h];break}!g&&m.includes(14)&&m.includes(2)&&m.includes(3)&&m.includes(4)&&m.includes(5)&&(g=!0,w=5)}const E=Object.values(t).sort((h,F)=>F-h);let I=0,S="High Card";return a&&g&&w===14?(I=10,S="Royal Flush"):a&&g?(I=9,S="Straight Flush"):E[0]===4?(I=8,S="Four of a Kind"):E[0]===3&&E[1]>=2?(I=7,S="Full House"):a?(I=6,S="Flush"):g?(I=5,S="Straight"):E[0]===3?(I=4,S="Three of a Kind"):E[0]===2&&E[1]===2?(I=3,S="Two Pair"):E[0]===2&&(I=2,S="One Pair"),{handName:S,handRank:I,highCard:Math.max(...n),values:n}}function fe(){B.value=Math.floor(Math.random()*s.value);const e=["Dealer","SB","BB","UTG","MP","CO"];for(let u=0;u<s.value;u++){const t=(u-B.value+s.value)%s.value;ee.value[u]=e[t]||`P${u}`}}function Ae(e){for(let u=e.length-1;u>0;u--){const t=Math.floor(Math.random()*(u+1));[e[u],e[t]]=[e[t],e[u]]}return e}function le(){N.value=[],L.value=1,G.value=ve(),x.value=[],p.value=0,v.value=0,y.value="betting",M.value=0,ke.value=Ae([...Array(s.value).keys()]),$.value=Array.from({length:s.value},(f,C)=>C===0?"You":`AI ${C}`),j.value=ce(s.value,2),d.value=Array(s.value).fill(ye.value),i.value=Array(s.value).fill(0),k.value=Array(s.value).fill(!1),Z.value=Array(s.value).fill(""),A.value=Array(s.value).fill(!1),fe();const e=J*1,u=J*2,t=(B.value+1)%s.value,l=(B.value+2)%s.value;c(`--- Round ${L.value} ---`);const n=Math.min(e,d.value[t]);d.value[t]-=n,i.value[t]+=n,p.value+=n,n>0&&c(`${$.value[t]} posts small blind: ${n}$`);const a=Math.min(u,d.value[l]);d.value[l]-=a,i.value[l]+=a,p.value+=a,a>0&&c(`${$.value[l]} posts big blind: ${a}$`),M.value=i.value[l],v.value=(l+1)%s.value,V()}function te(){B.value=0,L.value=1,N.value=[],y.value="idle",$.value=[],d.value=[],i.value=[],k.value=[],Z.value=[],ee.value=[],A.value=[],x.value=[],p.value=0,v.value=0,G.value=[],j.value={},Y.value=z,c("Game reset. Configure settings and click 'Start Game' to begin.")}function X(){B.value=(B.value+1)%s.value,L.value++,N.value.push([]),G.value=ve(),x.value=[],p.value=0,v.value=0,y.value="betting",M.value=0,j.value=ce(s.value,2),i.value=Array(s.value).fill(0),k.value=Array(s.value).fill(!1),Z.value=Array(s.value).fill(""),A.value=Array(s.value).fill(!1),fe(),c(`--- Round ${L.value} ---`);const e=J,u=J*2;let t,l;s.value===2?(t=B.value,l=(B.value+1)%s.value):(t=(B.value+1)%s.value,l=(B.value+2)%s.value);const n=Math.min(e,d.value[t]+(i.value[t]||0));d.value[t]-=n,i.value[t]=(i.value[t]||0)+n,p.value+=n,n>0&&c(`${$.value[t]} posts small blind: ${n}$`);const a=Math.min(u,d.value[l]+(i.value[l]||0));d.value[l]-=a,i.value[l]=(i.value[l]||0)+a,p.value+=a,a>0&&c(`${$.value[l]} posts big blind: ${a}$`),M.value=i.value[l],v.value=(l+1)%s.value,V()}function ne(){i.value=Array(s.value).fill(0),M.value=0,q.value=null;let e="",u=!1;if(y.value==="betting"?(Ce(),e="--- Flop ---"):y.value==="flop"?(Me(),e="--- Turn ---"):y.value==="turn"?(Re(),e="--- River ---"):y.value==="river"?(y.value="showdown",he(),u=!0):(console.error("proceedToNextPhase called with unexpected gamePhase:",y.value),u=!0),e&&c(e),u)return!0;let t=-1,l;s.value===2?l=B.value:l=(B.value+1)%s.value;for(let n=0;n<s.value;n++){const a=(l+n)%s.value;if(!k.value[a]){t=a;break}}return t!==-1?v.value=t:console.error("CRITICAL: No active player found to start new betting round in proceedToNextPhase."),!1}let W=!1;async function V(){if(!W){W=!0;try{for(;;){if(k.value.filter(e=>!e).length<=1){y.value="showdown",he();return}if(v.value>=0&&v.value<s.value&&!k.value[v.value]&&!A.value[v.value])break;if(v.value=(v.value+1)%s.value,A.value.every((e,u)=>e||k.value[u])){ne()||setTimeout(V,500);return}}if(v.value===0)return;try{const e=Pe(v.value);await new Promise(u=>setTimeout(u,500)),Te(v.value,e)}catch(e){console.error(`Error during AI ${$.value[v.value]}'s turn:`,e),c(`Error for ${$.value[v.value]}. They are folded due to an error.`),v.value>=0&&v.value<s.value&&(k.value[v.value]=!0,A.value[v.value]=!0)}if(A.value.every((e,u)=>e||k.value[u])){ne()||setTimeout(V,500);return}v.value=(v.value+1)%s.value,setTimeout(V,200)}catch(e){console.error("Critical error in nextTurn game logic:",e),c("A critical error occurred. Game progression might be halted.")}finally{W=!1}}}function Ce(){x.value=G.value.splice(0,3),y.value="flop",A.value=Array(s.value).fill(!1)}function Me(){x.value.push(G.value.splice(0,1)[0]),y.value="turn",A.value=Array(s.value).fill(!1)}function Re(){x.value.push(G.value.splice(0,1)[0]),y.value="river",A.value=Array(s.value).fill(!1)}function K(e,u=0){if(v.value!==0)return;let t="";if(e==="fold")k.value[0]=!0,t="You folded.";else if(e==="check"){if(!oe.value){c("You cannot check, there is a bet to call or action is not on you.");return}t="You checked."}else if(e==="call"){if(!se.value){c("You cannot call (not enough money, no bet to call, or action is not on you).");return}const l=Q.value;d.value[0]-=l,i.value[0]+=l,p.value+=l,t=`You called $${l}`}else if(e==="raise"){if(!ie.value){c("You cannot raise (e.g. not enough funds above the call amount, or action is not on you).");return}const l=Q.value,n=Math.max(z,u),a=l+n;if(d.value[0]<a){c("Not enough money for this specific raise amount.");return}d.value[0]-=a,i.value[0]+=a,p.value+=a,M.value=i.value[0],q.value=0,t=`You raised $${n} (to $${i.value[0]})`,A.value=A.value.map((f,C)=>!!(C===0||k.value[C]))}else if(e==="all-in"){if(!re.value){c("You cannot go all-in at this time (e.g. game not active, or action not on you).");return}const l=d.value[0];d.value[0]=0,i.value[0]+=l,p.value+=l,t=`You go ALL-IN with $${l} (total bet $${i.value[0]})`,i.value[0]>M.value&&(M.value=i.value[0],q.value=0,A.value=A.value.map((n,a)=>!!(a===0||k.value[a])),t+=", raising the bet!")}c(t),A.value[0]=!0,v.value=(v.value+1)%s.value,setTimeout(()=>V(),500)}function Pe(e){const u=i.value[e],t=M.value-u,l=d.value[e],n=p.value,a=Math.random()*.4+.6,f=j.value[e].concat(x.value),_=de(f).handRank;if(k.value[e])return{action:"fold"};if(l<t&&t>0){const g=_/10+n/(n+l)*.5;return l>0&&Math.random()<g?{action:"call"}:{action:"fold"}}const m=()=>{let g;_>=8?g=.7+Math.random()*.6:_>=5?g=.4+Math.random()*.4:_>=2?g=.3+Math.random()*.25:g=.25+Math.random()*.3;let w=n*g;return w*=1+(a-.5)*.5,Math.max(z,Math.round(w/5)*5)};if(_>=8)return t===0?Math.random()<.9+a*.1?{action:"raise",amount:m()}:{action:"check"}:Math.random()<.85+a*.15?{action:"raise",amount:m()}:{action:"call"};if(_>=5){if(t===0)return Math.random()<.7+a*.2?{action:"raise",amount:m()}:{action:"check"};if(t<=l*(.6+a*.15))return Math.random()<.65+a*.2?{action:"raise",amount:m()}:{action:"call"};if(t<=l*(.8+a*.1)){const g=Math.random();return g<.3+a*.1?{action:"raise",amount:m()}:g<.95+a*.05?{action:"call"}:{action:"fold"}}else return Math.random()<.5+a*.2?{action:"call"}:{action:"fold"}}else if(_>=2){if(t===0)return Math.random()<.45+a*.2?{action:"raise",amount:m()}:{action:"check"};if(t<=l*(.3+a*.1)){const g=Math.random();return g<.2+a*.15?{action:"raise",amount:m()}:g<.9+a*.1?{action:"call"}:{action:"fold"}}else return t<=l*(.7+a*.1)?Math.random()<.85+a*.15?{action:"call"}:{action:"fold"}:Math.random()<.4+a*.15?{action:"call"}:{action:"fold"}}else return t===0?Math.random()<.2+a*.5?{action:"raise",amount:m()}:{action:"check"}:t<=l*(.25+a*.1)&&t<n*.35?Math.random()<.55+a*.2?{action:"call"}:{action:"fold"}:t<=l*(.4+a*.15)&&Math.random()<.1+a*.15?{action:"call"}:{action:"fold"}}function Te(e,u){const{action:t,amount:l}=u,n=d.value[e],a=i.value[e]||0,f=M.value-a;if(t==="fold")k.value[e]=!0,c(`${$.value[e]} folds.`);else if(t==="raise"){const C=n-f;let _=Math.min(l,C);if(n>f+_&&(_=Math.max(z,_)),_<=0&&f===0)c(`${$.value[e]} checks.`);else if(_<0)k.value[e]=!0,c(`${$.value[e]} folds (unable to complete raise).`);else{const m=f+_;d.value[e]-=m,i.value[e]+=m,p.value+=m,M.value=i.value[e],q.value=e,d.value[e]===0&&m>0?c(`${$.value[e]} raises ALL-IN by $${_} (total bet $${i.value[e]})`):c(`${$.value[e]} raises by $${_} (total bet $${i.value[e]})`),A.value=A.value.map((g,w)=>k.value[w]||w===e)}}else if(t==="call")if(n>=f)d.value[e]-=f,i.value[e]+=f,p.value+=f,c(`${$.value[e]} calls $${f}`);else{const C=n;p.value+=C,i.value[e]+=C,d.value[e]=0,c(`${$.value[e]} calls ALL-IN with $${C}`)}else t==="check"&&(f>0?(k.value[e]=!0,c(`${$.value[e]} (AI) attempts to check facing a bet of $${f}, and folds.`)):c(`${$.value[e]} checks.`));A.value[e]=!0}function he(){const e=[];for(let a=0;a<s.value;a++)if(!k.value[a]){const f=j.value[a].concat(x.value);e.push({index:a,handEvaluation:de(f)})}e.sort((a,f)=>f.handEvaluation.handRank-a.handEvaluation.handRank);const u=e.length>0?e[0].handEvaluation.handRank:-1,t=e.filter(a=>a.handEvaluation.handRank===u),l=t.length>0?Math.floor(p.value/t.length):0;t.forEach(a=>{d.value[a.index]+=l,c(`${$.value[a.index]} wins with ${a.handEvaluation.handName} and receives $${l}`)});const n=t.length>0?p.value%t.length:p.value;n>0&&t.length>0?(d.value[t[0].index]+=n,c(`${$.value[t[0].index]} receives an extra $${n} from remainder`)):n>0&&t.length===0&&e.length===1&&(d.value[e[0].index]+=n,c(`${$.value[e[0].index]} receives $${n} as the only remaining player.`)),p.value=0,c(`--- End of Round ${L.value} ---`),setTimeout(()=>X(),1500)}function ue(e){Y.value=Math.min(_e.value,Y.value+e)}function Be(e){Y.value=Math.max(z,Y.value-e)}const xe={class:"TableLayout"},Ie={class:"PlayerLineup"},Se={class:"PlayerName"},Fe={class:"PlayerPos"},we={class:"PlayerPosition"},Le={class:"PlayerHand"},Ne={class:"RankCard"},Ee={class:"SuitCard"},Ye={class:"PlayerBet"},He={class:"TableFlob"},Ge={key:0,class:"TableFlobCard"},Oe={class:"RankCard"},De={class:"SuitCard"},Ve={class:"PoolMoney"},je={class:"PlayerAction"},Ke={class:"ActionButton"},ze=["disabled"],Je=["disabled"],Qe=["disabled"],qe=["disabled"],Ue=["disabled"],We={class:"ChipButton"},Xe=["onClick"],Ze=["onClick"],ea=["onClick"],aa={class:"TableSetting"},la=["disabled"],ta=["disabled"],na={__name:"Table",setup(e){const u=b(null);return be(N,()=>{$e(()=>{u.value&&(u.value.scrollTop=u.value.scrollHeight)})},{deep:!0}),(t,l)=>(T(),P("div",xe,[r("div",Ie,[(T(!0),P(O,null,D(o($),(n,a)=>(T(),P("div",{key:a,class:U(["PlayerFrame",{activePlayers:a===o(v),foldedPlayers:o(k)[a],Main:a===0&&a===o(v),Player:a!==0&&a===o(v)}])},[r("div",Se,[r("div",null,R(n),1),r("div",Fe,"("+R(o(ee)[a])+")",1)]),r("div",we,[r("div",null,"$"+R(o(d)[a]),1)]),r("div",Le,[(T(!0),P(O,null,D(o(j)[a],(f,C)=>(T(),P("div",{key:C,class:U(["CardBody",o(ae)(f.suit)])},[r("div",Ne,R(f.rank),1),r("div",Ee,R(f.suit),1)],2))),128))]),r("div",Ye,"Bet: $"+R(o(i)[a]),1)],2))),128))]),r("div",He,[o(x)&&o(x).length?(T(),P("div",Ge,[(T(!0),P(O,null,D(o(x),(n,a)=>(T(),P("div",{key:a,class:U(["CardBody",o(ae)(n.suit)])},[r("div",Oe,R(n.rank),1),r("div",De,R(n.suit),1)],2))),128))])):ge("",!0),r("div",Ve,R(o(p))+"$",1),r("div",null,"Current Game Phase: "+R(o(y)),1)]),r("div",{class:"TimelineLog",ref_key:"timelineLogRef",ref:u},[(T(!0),P(O,null,D(o(N),(n,a)=>(T(),P("div",{key:a,class:"RoundLog"},[r("div",null,"Round "+R(a+1),1),r("div",null,[(T(!0),P(O,null,D(n,(f,C)=>(T(),P("div",{key:C},R(f),1))),128))])]))),128))],512),r("div",je,[r("div",Ke,[r("button",{onClick:l[0]||(l[0]=n=>o(K)("check")),disabled:!o(oe)},"Check",8,ze),r("button",{onClick:l[1]||(l[1]=n=>o(K)("call",o(Q))),disabled:!o(se)},R(`Call $${o(Q)}`),9,Je),r("button",{onClick:l[2]||(l[2]=n=>o(K)("raise",o(Y))),disabled:!o(ie)},"Raise $"+R(o(Y)),9,Qe),r("button",{onClick:l[3]||(l[3]=n=>o(K)("all-in")),disabled:!o(re)},"All-In",8,qe),r("button",{onClick:l[4]||(l[4]=n=>o(K)("fold")),disabled:!t.canFold},"Fold",8,Ue)])]),r("div",We,[(T(!0),P(O,null,D(o(pe),n=>(T(),P("div",{key:n,class:"ChipBtn"},[r("button",{onClick:a=>o(Be)(n)},"-",8,Xe),r("button",{onClick:a=>o(ue)(n)},"$"+R(n),9,Ze),r("button",{onClick:a=>o(ue)(n)},"+",8,ea)]))),128))]),r("div",aa,[r("button",{onClick:l[5]||(l[5]=(...n)=>o(le)&&o(le)(...n)),disabled:o(y)!=="idle"},"Start Game",8,la),r("button",{onClick:l[6]||(l[6]=(...n)=>o(X)&&o(X)(...n)),disabled:o(y)==="idle"},"Next",8,ta),r("button",{onClick:l[7]||(l[7]=(...n)=>o(te)&&o(te)(...n))},"Reset")])]))}},oa=me(na,[["__scopeId","data-v-648508c9"]]);export{oa as default};
