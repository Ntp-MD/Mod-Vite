import{r as y,e as G,_ as me,k as ge,c as P,b as c,F as D,f as V,u as o,l as be,t as R,o as T,n as q,m as ye}from"./index-DjAZJ1eP.js";const N=y([]),E=y(1),O=y([]),K=y({}),x=y([]),_=y(0),h=y(0),g=y("idle"),C=y(0),Y=y(0),z=10,s=y(6),$e=y(1e3),w=y(0),$=y([]),i=y([]),r=y([]),m=y([]),Z=y([]),ee=y([]),k=y([]),ke=[10,30,50,100],W=10,J=G(()=>Math.max(0,C.value-(r.value[0]||0))),pe=G(()=>i.value[0]+(r.value[0]||0)),se=G(()=>g.value==="idle"?!1:C.value===(r.value[0]||0)),X=G(()=>C.value>(r.value[0]||0)&&i.value[0]>=C.value-(r.value[0]||0)),ie=G(()=>i.value[0]>C.value-(r.value[0]||0));G(()=>g.value!=="idle");const re=G(()=>i.value[0]>0&&g.value!=="idle"&&g.value!=="showdown"),Q=y(null);function d(l){N.value[E.value-1]||(N.value[E.value-1]=[]),N.value[E.value-1].push(l)}function ae(l){switch(l){case"♠":return"spades";case"♥":return"hearts";case"♦":return"diamonds";case"♣":return"clubs";default:return""}}function ve(){const l=["♠","♥","♦","♣"],u=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],t=[];for(const e of l)for(const n of u)t.push({rank:n,suit:e});for(let e=t.length-1;e>0;e--){const n=Math.floor(Math.random()*(e+1));[t[e],t[n]]=[t[n],t[e]]}return t}function ce(l,u){const t={};for(let e=0;e<l;e++)t[e]=O.value.splice(0,u);return t}function de(l){const u={2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,J:11,Q:12,K:13,A:14},t={},e={},n=l.map(f=>u[f.rank]).sort((f,S)=>f-S);for(const f of l){const S=u[f.rank];t[S]=(t[S]||0)+1,e[f.suit]=(e[f.suit]||0)+1}const a=Object.values(e).some(f=>f>=5);let v=null;if(a){for(const f in e)if(e[f]>=5){v=f;break}}const A=(a?l.filter(f=>f.suit===v):l).map(f=>u[f.rank]).sort((f,S)=>f-S);let b=[...new Set(A)].sort((f,S)=>f-S),M=!1,F=0;if(b.length>=5){for(let f=b.length-1;f>=4;f--)if(b[f]-b[f-4]===4){M=!0,F=b[f];break}!M&&b.includes(14)&&b.includes(2)&&b.includes(3)&&b.includes(4)&&b.includes(5)&&(M=!0,F=5)}const H=Object.values(t).sort((f,S)=>S-f);let B=0,I="High Card";return a&&M&&F===14?(B=10,I="Royal Flush"):a&&M?(B=9,I="Straight Flush"):H[0]===4?(B=8,I="Four of a Kind"):H[0]===3&&H[1]>=2?(B=7,I="Full House"):a?(B=6,I="Flush"):M?(B=5,I="Straight"):H[0]===3?(B=4,I="Three of a Kind"):H[0]===2&&H[1]===2?(B=3,I="Two Pair"):H[0]===2&&(B=2,I="One Pair"),{handName:I,handRank:B,highCard:Math.max(...n),values:n}}function fe(){w.value=Math.floor(Math.random()*s.value);const l=["Dealer","SB","BB","UTG","MP","CO"];for(let u=0;u<s.value;u++){const t=(u-w.value+s.value)%s.value;ee.value[u]=l[t]||`P${u}`}}function le(){N.value=[],E.value=1,O.value=ve(),x.value=[],_.value=0,h.value=0,g.value="betting",C.value=0,$.value=Array.from({length:s.value},(v,p)=>p===0?"You":`AI ${p}`),K.value=ce(s.value,2),i.value=Array(s.value).fill($e.value),r.value=Array(s.value).fill(0),m.value=Array(s.value).fill(!1),Z.value=Array(s.value).fill(""),k.value=Array(s.value).fill(!1),fe();const l=z*1,u=z*2,t=(w.value+1)%s.value,e=(w.value+2)%s.value;d(`--- Round ${E.value} ---`);const n=Math.min(l,i.value[t]);n>0&&(i.value[t]-=n,r.value[t]+=n,_.value+=n,d(`${$.value[t]} posts small blind: ${n}$`));const a=Math.min(u,i.value[e]);a>0&&(i.value[e]-=a,r.value[e]+=a,_.value+=a,d(`${$.value[e]} posts big blind: ${a}$`)),C.value=r.value[e],h.value=(e+1)%s.value,L()}function te(){w.value=0,E.value=1,N.value=[],g.value="idle",$.value=[],i.value=[],r.value=[],m.value=[],Z.value=[],ee.value=[],k.value=[],x.value=[],_.value=0,h.value=0,O.value=[],K.value={},Y.value=W,d("Game reset. Configure settings and click 'Start Game' to begin.")}function ne(){w.value=(w.value+1)%s.value,E.value++,N.value.push([]),O.value=ve(),x.value=[],_.value=0,h.value=0,g.value="betting",C.value=0,K.value=ce(s.value,2),r.value=Array(s.value).fill(0),m.value=Array(s.value).fill(!1),Z.value=Array(s.value).fill(""),k.value=Array(s.value).fill(!1),fe(),d(`--- Round ${E.value} ---`);const l=z,u=z*2;let t,e;s.value===2?(t=w.value,e=(w.value+1)%s.value):(t=(w.value+1)%s.value,e=(w.value+2)%s.value);const n=Math.min(l,i.value[t]+(r.value[t]||0));i.value[t]-=n,r.value[t]=(r.value[t]||0)+n,_.value+=n,n>0&&d(`${$.value[t]} posts small blind: ${n}$`);const a=Math.min(u,i.value[e]+(r.value[e]||0));i.value[e]-=a,r.value[e]=(r.value[e]||0)+a,_.value+=a,a>0&&d(`${$.value[e]} posts big blind: ${a}$`),C.value=r.value[e],h.value=(e+1)%s.value,L()}function ue(){r.value=Array(s.value).fill(0),C.value=0,Q.value=null;let l="",u=!1;if(g.value==="betting"?(_e(),l="--- Flop ---"):g.value==="flop"?(Ae(),l="--- Turn ---"):g.value==="turn"?(Ce(),l="--- River ---"):g.value==="river"?(g.value="showdown",he(),u=!0):(console.error("proceedToNextPhase called with unexpected gamePhase:",g.value),u=!0),l&&d(l),u)return!0;let t=-1,e;s.value===2?e=w.value:e=(w.value+1)%s.value;for(let n=0;n<s.value;n++){const a=(e+n)%s.value;if(!m.value[a]){t=a;break}}return t!==-1?h.value=t:console.error("CRITICAL: No active player found to start new betting round in proceedToNextPhase."),!1}let U=!1;async function L(){if(!U){U=!0;try{for(;;){const u=h.value;if(m.value.filter(e=>!e).length<=1){g.value!=="showdown"&&(g.value="showdown",he());return}if(m.value[u]){h.value=(u+1)%s.value;continue}if(i.value[u]===0&&!m.value[u]&&!k.value[u])k.value[u]=!0;else if(i.value[u]>0&&!m.value[u]&&!k.value[u])break;let t=!0;for(let e=0;e<s.value;e++)if(!m.value[e]&&i.value[e]>0&&!k.value[e]){t=!1;break}if(t){if(!ue()){const n=i.value.map((v,p)=>p).filter(v=>!m.value[v]),a=n.filter(v=>i.value[v]>0);n.length>1&&a.length<=1&&g.value!=="showdown"?setTimeout(L,100):setTimeout(L,500)}return}h.value=(u+1)%s.value}if(h.value===0&&i.value[0]>0&&!k.value[0]&&!m.value[0])return;try{const u=Me(h.value);await new Promise(t=>setTimeout(t,500)),Re(h.value,u)}catch(u){console.error(`Error during AI ${$.value[h.value]}'s turn:`,u),d(`Error for ${$.value[h.value]}. They are folded due to an error.`),h.value>=0&&h.value<s.value&&(m.value[h.value]=!0,k.value[h.value]=!0)}let l=!0;for(let u=0;u<s.value;u++)if(!m.value[u]&&i.value[u]>0&&!k.value[u]){l=!1;break}if(l){if(!ue()){const t=i.value.map((n,a)=>a).filter(n=>!m.value[n]),e=t.filter(n=>i.value[n]>0);t.length>1&&e.length<=1&&g.value!=="showdown"?setTimeout(L,100):setTimeout(L,500)}return}h.value=(h.value+1)%s.value,setTimeout(L,200)}catch(l){console.error("Critical error in nextTurn game logic:",l),d("A critical error occurred. Game progression might be halted.")}finally{U=!1}}}function _e(){x.value=O.value.splice(0,3),g.value="flop",k.value=Array(s.value).fill(!1)}function Ae(){x.value.push(O.value.splice(0,1)[0]),g.value="turn",k.value=Array(s.value).fill(!1)}function Ce(){x.value.push(O.value.splice(0,1)[0]),g.value="river",k.value=Array(s.value).fill(!1)}function j(l,u=0){if(h.value!==0)return;let t="";if(l==="fold")m.value[0]=!0,t="You folded.";else if(l==="check"){if(!se.value){d("You cannot check, there is a bet to call or action is not on you.");return}t="You checked."}else if(l==="call"){if(!X.value){d("You cannot call (not enough money, no bet to call, or action is not on you).");return}const e=J.value;i.value[0]-=e,r.value[0]+=e,_.value+=e,t=`You called $${e}`}else if(l==="raise"){if(!ie.value){d("You cannot raise (e.g. not enough funds above the call amount, or action is not on you).");return}const e=J.value,n=Math.max(W,u),a=e+n;if(i.value[0]<a){d("Not enough money for this specific raise amount.");return}i.value[0]-=a,r.value[0]+=a,_.value+=a,C.value=r.value[0],Q.value=0,t=`You raised $${n} (to $${r.value[0]})`,k.value=k.value.map((v,p)=>!!(p===0||m.value[p]))}else if(l==="all-in"){if(!re.value){d("You cannot go all-in at this time (e.g. game not active, or action not on you).");return}const e=i.value[0];i.value[0]=0,r.value[0]+=e,_.value+=e,t=`You go ALL-IN with $${e} (total bet $${r.value[0]})`,r.value[0]>C.value&&(C.value=r.value[0],Q.value=0,k.value=k.value.map((n,a)=>!!(a===0||m.value[a])),t+=", raising the bet!")}d(t),k.value[0]=!0,h.value=(h.value+1)%s.value,setTimeout(()=>L(),500)}function Me(l){const u=r.value[l],t=C.value-u,e=i.value[l],n=_.value,a=Math.random()*.4+.6,v=K.value[l].concat(x.value),A=de(v).handRank;if(m.value[l])return{action:"fold"};if(e<t&&t>0){const M=A/10+n/(n+e)*.5;return e>0&&Math.random()<M?{action:"call"}:{action:"fold"}}const b=()=>{let M;A>=8?M=.7+Math.random()*.6:A>=5?M=.4+Math.random()*.4:A>=2?M=.3+Math.random()*.25:M=.25+Math.random()*.3;let F=n*M;return F*=1+(a-.5)*.5,Math.max(W,Math.round(F/5)*5)};return A>=8?t===0?Math.random()<.9+a*.1?{action:"raise",amount:b()}:{action:"check"}:Math.random()<.85+a*.15?{action:"raise",amount:b()}:{action:"call"}:A>=5?t===0?Math.random()<.7+a*.2?{action:"raise",amount:b()}:{action:"check"}:t<=e*(.6+a*.15)?Math.random()<.65+a*.2?{action:"raise",amount:b()}:{action:"call"}:t<=e*(.8+a*.1)?Math.random()<.5+a*.2?{action:"call"}:{action:"fold"}:Math.random()<.2+a*.1?{action:"call"}:{action:"fold"}:A>=2?t===0?Math.random()<.5+a*.3?{action:"raise",amount:b()}:{action:"check"}:t<=e*.25?Math.random()<.6+a*.2?{action:"call"}:{action:"fold"}:Math.random()<.3+a*.2?{action:"call"}:{action:"fold"}:t===0?Math.random()<.3+a*.2?{action:"raise",amount:b()}:{action:"check"}:t<=e*.15?Math.random()<.3+a*.2?{action:"call"}:{action:"fold"}:{action:"fold"}}function Re(l,u){const{action:t,amount:e}=u,n=i.value[l],a=r.value[l]||0,v=C.value-a;if(t==="fold")m.value[l]=!0,d(`${$.value[l]} folds.`);else if(t==="raise"){const p=n-v;let A=Math.min(e,p);if(n>v+A&&(A=Math.max(W,A)),A<=0&&v===0)d(`${$.value[l]} checks.`);else if(A<0)m.value[l]=!0,d(`${$.value[l]} folds (unable to complete raise).`);else{const b=v+A;i.value[l]-=b,r.value[l]+=b,_.value+=b,C.value=r.value[l],Q.value=l,i.value[l]===0&&b>0?d(`${$.value[l]} raises ALL-IN by $${A} (total bet $${r.value[l]})`):d(`${$.value[l]} raises by $${A} (total bet $${r.value[l]})`),k.value=k.value.map((M,F)=>m.value[F]||F===l)}}else if(t==="call")if(n>=v)i.value[l]-=v,r.value[l]+=v,_.value+=v,d(`${$.value[l]} calls $${v}`);else{const p=n;_.value+=p,r.value[l]+=p,i.value[l]=0,d(`${$.value[l]} calls ALL-IN with $${p}`)}else t==="check"&&(v>0?(m.value[l]=!0,d(`${$.value[l]} (AI) attempts to check facing a bet of $${v}, and folds.`)):d(`${$.value[l]} checks.`));k.value[l]=!0}function he(){const l=[];for(let a=0;a<s.value;a++)if(!m.value[a]){const v=K.value[a].concat(x.value);l.push({index:a,handEvaluation:de(v)})}l.sort((a,v)=>v.handEvaluation.handRank-a.handEvaluation.handRank);const u=l.length>0?l[0].handEvaluation.handRank:-1,t=l.filter(a=>a.handEvaluation.handRank===u),e=t.length>0?Math.floor(_.value/t.length):0;t.forEach(a=>{i.value[a.index]+=e,d(`${$.value[a.index]} wins with ${a.handEvaluation.handName} and receives $${e}`)});const n=t.length>0?_.value%t.length:_.value;n>0&&t.length>0?(i.value[t[0].index]+=n,d(`${$.value[t[0].index]} receives an extra $${n} from remainder`)):n>0&&t.length===0&&l.length===1&&(i.value[l[0].index]+=n,d(`${$.value[l[0].index]} receives $${n} as the only remaining player.`)),_.value=0,d(`--- End of Round ${E.value} ---`)}function oe(l){Y.value=Math.min(pe.value,Y.value+l)}function Pe(l){Y.value=Math.max(W,Y.value-l)}const Te={class:"TableLayout"},we={class:"PlayerLineup"},xe={class:"PlayerName"},Be={class:"PlayerPos"},Ie={class:"PlayerPosition"},Se={class:"PlayerHand"},Fe={class:"RankCard"},Ee={class:"SuitCard"},Le={class:"PlayerBet"},Ne={class:"TableFlob"},He={key:0,class:"TableFlobCard"},Ye={class:"RankCard"},Ge={class:"SuitCard"},Oe={class:"PoolMoney"},De={class:"PlayerAction"},Ve={class:"ActionButton"},Ke=["disabled"],je=["disabled"],We=["disabled"],ze=["disabled"],Je=["disabled"],Qe={class:"ChipButton"},qe=["onClick"],Ue=["onClick"],Xe=["onClick"],Ze={class:"TableSetting"},ea=["disabled"],aa=["disabled"],la={__name:"Table",setup(l){const u=y(null);return ge(N,()=>{ye(()=>{u.value&&(u.value.scrollTop=u.value.scrollHeight)})},{deep:!0}),(t,e)=>(T(),P("div",Te,[c("div",we,[(T(!0),P(D,null,V(o($),(n,a)=>(T(),P("div",{key:a,class:q(["PlayerFrame",{activePlayers:a===o(h),foldedPlayers:o(m)[a],Main:a===0&&a===o(h),Player:a!==0&&a===o(h)}])},[c("div",xe,[c("div",null,R(n),1),c("div",Be,"("+R(o(ee)[a])+")",1)]),c("div",Ie,[c("div",null,"$"+R(o(i)[a]),1)]),c("div",Se,[(T(!0),P(D,null,V(o(K)[a],(v,p)=>(T(),P("div",{key:p,class:q(["CardBody",[o(ae)(v.suit),{"hide-card-details":a!==0&&o(g)!=="showdown"}]])},[c("div",Fe,R(v.rank),1),c("div",Ee,R(v.suit),1)],2))),128))]),c("div",Le,"Bet: $"+R(o(r)[a]),1)],2))),128))]),c("div",Ne,[o(x)&&o(x).length?(T(),P("div",He,[(T(!0),P(D,null,V(o(x),(n,a)=>(T(),P("div",{key:a,class:q(["CardBody",o(ae)(n.suit)])},[c("div",Ye,R(n.rank),1),c("div",Ge,R(n.suit),1)],2))),128))])):be("",!0),c("div",Oe,R(o(_))+"$",1),c("div",null,"Current Game Phase: "+R(o(g)),1)]),c("div",{class:"TimelineLog",ref_key:"timelineLogRef",ref:u},[(T(!0),P(D,null,V(o(N),(n,a)=>(T(),P("div",{key:a,class:"RoundLog"},[c("div",null,"Round "+R(a+1),1),c("div",null,[(T(!0),P(D,null,V(n,(v,p)=>(T(),P("div",{key:p},R(v),1))),128))])]))),128))],512),c("div",De,[c("div",Ve,[c("button",{onClick:e[0]||(e[0]=n=>o(j)("check")),disabled:!o(se)},"Check",8,Ke),c("button",{onClick:e[1]||(e[1]=n=>o(j)("call",o(J))),disabled:!o(X)},R(`Call $${o(J)}`),9,je),c("button",{onClick:e[2]||(e[2]=n=>o(j)("raise",o(Y))),disabled:!o(ie)},"Raise $"+R(o(Y)),9,We),c("button",{onClick:e[3]||(e[3]=n=>o(j)("all-in")),disabled:!o(re)},"All-In",8,ze),c("button",{onClick:e[4]||(e[4]=n=>o(j)("fold")),disabled:!o(X)},"Fold",8,Je)])]),c("div",Qe,[(T(!0),P(D,null,V(o(ke),n=>(T(),P("div",{key:n,class:"ChipBtn"},[c("button",{onClick:a=>o(Pe)(n)},"-",8,qe),c("button",{onClick:a=>o(oe)(n)},"$"+R(n),9,Ue),c("button",{onClick:a=>o(oe)(n)},"+",8,Xe)]))),128))]),c("div",Ze,[c("button",{onClick:e[5]||(e[5]=(...n)=>o(le)&&o(le)(...n)),disabled:o(g)!=="idle"},"Start Game",8,ea),c("button",{onClick:e[6]||(e[6]=(...n)=>o(ne)&&o(ne)(...n)),disabled:o(g)==="idle"},"Next",8,aa),c("button",{onClick:e[7]||(e[7]=(...n)=>o(te)&&o(te)(...n))},"Reset")])]))}},na=me(la,[["__scopeId","data-v-c8f88c18"]]);export{na as default};
